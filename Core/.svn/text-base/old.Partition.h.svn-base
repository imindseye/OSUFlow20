//------------------------------------------------------------------------------
//
// Partition header
// manages parts
//
// Copyright (c) 2009 Han-Wei Shen and Tom Peterka
//
// Contact:
//
// Han-Wei Shen
// The Ohio State University
// Columbus, OH
//
// Tom Peterka
// MCS Radix Lab
// Argonne National Laboratory
// 9700 S. Cass Ave.
// Argonne, IL 60439
// tpeterka@mcs.anl.gov
//
// All rights reserved. May not be used, modified, or copied
// without permission
//
//--------------------------------------------------------------------------

#ifndef _PARTITION_H_
#define _PARTITION_H_ 

#include<stdio.h>
#include<stdlib.h>
#include "VectorMatrix.h" 

#ifdef _MPI
#include <mpi.h>
#endif

// a global (all processes) block or partition
struct Partition4D {

  // the following arrays are indexed according to neighbor number
  int *NumSendPoints; // number of points ready to send
  int *SizeSendPoints; // size of sending points list (bytes)
  float **SendPoints; // sending points list
	int64_t **SendPointIds; // sending point ids
/*   int *NumRecvPoints; // number of points received */
/*   int *SizeRecvPoints; // size of receiving points list (bytes) */
/*   float **RecvPoints; // receiving points list */

  int NumNeighbors; // the number of neighbors used
  int AllocNeighbors; // number of neighbors allocated

  // the following array fills up in order, from 0 to number of requests
#ifdef _MPI
  MPI_Request *SendReqs; // send requests
  MPI_Request *RecvReqs; // receive requests
  int NumSendReqs; // number of send requests
  int NumRecvReqs; // number of receive requests
#endif 

  int Proc; // process(or) number (mpi rank, core number, node number, etc.)

  int Requed; // data are requested
  int Loaded; // data are loaded
  int Comped; // data are computed

};

class Partition {

 public: 
  
  Partition(int npart, int nproc, int myproc, bool track_ids = false); 
  ~Partition(); 

  void SetReq(int myrank) { parts[myrank].Requed = 1; }
  void ClearReq(int myrank) { parts[myrank].Requed = 0; }
  int GetReq(int myrank) { return parts[myrank].Requed;}
  void SetLoad(int myrank) { parts[myrank].Loaded = 1; }
  void ClearLoad(int myrank) { parts[myrank].Loaded = 0; }
  int GetLoad(int myrank) { return parts[myrank].Loaded;}
  void SetComp(int myrank, int iter_num) { parts[myrank].Comped = iter_num; }
  void ClearComp(int myrank) { parts[myrank].Comped = -1; }
  int GetComp(int myrank, int iter_num) { return(parts[myrank].Comped >= 
						    iter_num); }
  void PostPoint(int myrank, VECTOR4 p, int neighbor, int64_t seed_id = -1);
  void PrintPost(int myrank);
  void PrintRecv(int myrank);
  void GetRecvPts(int myrank, VECTOR4 *ls);
  int GetNumNeighbors(int myrank) { return parts[myrank].NumNeighbors; }
  void AddNeighbor(int myrank);
  void RemoveBlock(int myrank);
  void AddBlock(int myrank);

#ifdef _MPI
  int ExchangeNeighbors(int *block_ranks, int **neighbor_ranks,
			int **neighbor_procs, VECTOR4 **seeds, int *size_seeds,
			int *num_seeds, MPI_Comm comm = MPI_COMM_WORLD,
			int64_t **seed_ids = NULL);
#endif
  int SerExchangeNeighbors(int **neighbor_ranks, VECTOR4 **seeds, int *size_seeds,
			int *num_seeds);

  Partition4D *parts; // global partition list
  int nb; // number of local blocks

 private: 

  int npart; // total number of partitions
  int nproc; // total number of processes
  int myproc; // my process id
	bool track_ids; // should i track fieldline ids

}; 

#endif 
