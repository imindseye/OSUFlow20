//------------------------------------------------------------------------------
//
// trace header
// seeds and traces particles
//
// Tom Peterka
// Argonne National Laboratory
// 9700 S. Cass Ave.
// Argonne, IL 60439
// tpeterka@mcs.anl.gov
//
// All rights reserved. May not be used, modified, or copied
// without permission
//
//--------------------------------------------------------------------------

#ifdef _MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h> 
#include <list>
#include <iterator>
#include "OSUFlow.h"
#include "calc_subvolume.h"
#include "Lattice4D.h"
#include "LatticeAMR.h"
#include "Block.h"

class Trace {

 public:

  Trace(Lattice4D *lat, OSUFlow **osuflow, VECTOR4 **Seeds, int *NumSeeds,
	list<vtListTimeSeedTrace*> *sl_list, VECTOR4 **pt, int **npt,
	int *tot_ntrace, int nb, int track_seed_id = 0);
  Trace(LatticeAMR *lat, OSUFlow **osuflow, VECTOR4 **Seeds, int *NumSeeds,
	list<vtListTimeSeedTrace*> *sl_list, VECTOR4 **pt, int **npt,
	int *tot_ntrace, int nb, int track_seed_id = 0);
  Trace(Lattice4D *lat);
  Trace(LatticeAMR *lat);
  ~Trace();
  void UpdateOSUFlow(OSUFlow **osuflow);
  void ComputePathlines(int block_num, int pf, int *w = NULL);
  void ComputeStreamlines(int block_num, int pf, int *w = NULL);
  void GatherFieldlines();
  void SerialGatherFieldlines();
  int GatherNumPts(int* &ntrace, int all);
  void GatherPts(int *ntrace, int mynpt);
  void PrintPerf(double TotTime, double TotIOTime, double TotCommTime, 
		 double TotCompTime, double TotOutTime,
		 int TotParticles);
  void WriteFieldlines(int *ntrace, int mynpt, char *filename);
  void DistributedWriteFieldlines(char *filename, char *id_filename);
  void InitTraces4D(VECTOR4 **Seeds, int *NumSeeds, int *SizeSeeds, 
		    VECTOR3 *seeds, int tf, VECTOR3 *specific_seeds = NULL, 
		    int num_specific_seeds = 0, int64_t **SeedIds = NULL);
  void InitTracesAMR(VECTOR4 **Seeds, int *NumSeeds, int *SizeSeeds,
		     VECTOR3 *seeds, int tf, int64_t **SeedIds = NULL);
  int OldExchangeNeighbors(VECTOR4 **seeds, int *size_seeds, int *num_seeds, 
			int64_t **seed_ids = NULL);
  int SyncExchangeNeighbors(VECTOR4 **seeds, int *size_seeds, int *num_seeds,
			    int64_t **seed_ids = NULL);
  int AsyncExchangeNeighbors(VECTOR4 **seeds, int *size_seeds, int *num_seeds,
			     int64_t **seed_ids = NULL);
  int SerExchangeNeighbors(VECTOR4 **seeds, int *size_seeds, int *num_seeds);
  int AsyncFlush(VECTOR4 **seeds, int *size_seeds, 
		 int *num_seeds, int64_t **seed_ids = NULL);
  double GetMyCompTime() { return comp_time; }
  void SetSeeds(OSUFlow* osuflow, float* from, float* to, 
		VECTOR3* specific_seeds, int num_specific_seeds);

  // seed list management
  void InitSeedLists4D(); 
  void InitSeedLists3D(); 
  void ResetSeedLists4D(); 
  void ResetSeedLists3D(); 
  void ResetSeedLists4D(int i) { seedlists4D[i].clear(); }
  void ResetSeedLists3D(int i) { seedlists3D[i].clear(); }
  bool InsertSeed(int i, int j, int k, int l, VECTOR4 p); 
  bool InsertSeed(int i, int j, int k, VECTOR3 p);
  bool InsertSeed(int from_i, int from_j, int from_k, int from_t, 
		  int to_i, int to_j, int to_k, int to_t, VECTOR4); 
  bool InsertSeed(int from_i, int from_j, int from_k, 
		  int to_i, int to_j, int to_k, VECTOR3); 
  bool InsertSeed(int to_rank, VECTOR4 p); 
  bool InsertSeed(int to_rank, VECTOR3 p); 
  bool InsertSeed(int from_rank, int to_rank, VECTOR4 p); 
  bool InsertSeed(int from_rank, int to_rank, VECTOR3 p); 
  void ResetFlowMatrix();
  int GetFlowMatrix(int i, int j);
  list<VECTOR3> *seedlists3D; 
  list<VECTOR4> *seedlists4D; 

  int* flowMatrix; 

  Lattice4D *lat4D; // 4D lattice
  LatticeAMR *latAMR; // AMR lattice

#ifdef ZOLTAN
  // wrapper around repartition method
  void Repartition(int grp, int *nblocks, VECTOR4 ***seeds, int **size_seeds, 
		   int **num_seeds, int type, OSUFlow ***osuflow, Block *block, 
		   int compute_type, MPI_Comm comm, int *wgts = NULL);
#endif

 private:

  void PointsToSeeds(VECTOR4 **seeds, int *size_seeds, int *num_seeds, 
		     int64_t **seed_ids, float **points, int **counts,
		     int64_t **point_ids, int nproc);

  int *block_stats; // block stats
  double *time_stats; // time stats
  int n_block_stats;// number of block stats
  int n_time_stats; // number of time stats
  int TotSeeds; // total number of seeds for all blocks and all rounds
  int TotSteps; // total number of integration stpes for all seeds,
                // for all blocks and all rounds
  // in this process
  OSUFlow **osuflow;
  VECTOR4 **Seeds; // list of seed lists
  int *NumSeeds; // number of seeds in each list
  list<vtListTimeSeedTrace*> *sl_list;
  VECTOR4 **pt; // points in everyone's traces
  int **npt; // everyone's number of points in their traces
  int *tot_ntrace; // total number of everyone's traces
  int track_seed_id;
  int nb;
  double comp_time; // computation time for my process

  double comm_time1, comm_time2, comm_time3;

};
